#!/usr/bin/python3
# -*- coding: utf-8 -*-
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ContentType
from keyboard import key
from shorteners import short
from sqldata import sqldata
import config, logging, time

dp = Dispatcher(bot := Bot(token=config.API_BOT))
logging.basicConfig(level=logging.INFO)
#logging.basicConfig(level=logging.INFO, filename='cutter_bot.log', format="%(asctime)s [%(levelname)s] %(message)s")
#logging.getLogger().addHandler(logging.StreamHandler())
db = sqldata('cuter_db.db')
db.init_bd()
kb = key()
s = short()

@dp.message_handler(text=['üõ†–°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–∏—Å'])
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
  db.add_user(message.from_user.id,message.from_user.first_name,message.from_user.full_name,message.from_user.username,message.from_user.language_code,time.time(),time.time())
  db.insert_cutter(message.from_user.id,'None')
  db.add_last_date(time.time(),message.from_user.id)
  print(message.date, message.from_user.id, message.from_user.first_name, message.text)
  await bot.send_message(98684080, f"{message.date}, {message.from_user.id}, {message.from_user.first_name}, {message.text}", parse_mode= 'HTML')
  await message.answer("‚úÇÔ∏è–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã–±–µ—Ä–µ—Ç–µ —Å–µ—Ä–≤–∏—Å. \n\n–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è(<b>URL</b>) —Å–µ—Ä–≤–∏—Å–∞ –±—É–¥–µ—Ç –≤ –Ω–∞—á–∞–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏.\n–°–µ—Ä–≤–∏—Å <b>Bit.ly</b> –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∏–∫–∞–º! ", parse_mode= 'HTML', reply_markup=kb.start)

@dp.message_handler(text=['Cutt.ly', 'TinyURL.com', 'Da.gd', 'Is.gd', 'Bit.ly (üìä—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)'])
async def cutter_menu(message: types.Message):
  if message.text == 'Bit.ly (üìä—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)':
    db.insert_cutter(message.from_user.id,'Bit.ly')
  else:
    db.insert_cutter(message.from_user.id,message.text)

  print(message.date, message.from_user.id, message.from_user.first_name, message.text)
  await bot.send_message(98684080, f"{message.date}, {message.from_user.id}, {message.from_user.first_name}, {message.text}", parse_mode= 'HTML')
  keyboard = kb.cut_menu_stat if message.text == 'Bit.ly (üìä—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)' else kb.cut_menu
  await message.answer(f"–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–∫–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫: {message.text} \n\n–í–≤–µ–¥–∏—Ç–µ <b>URL</b> –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ <b>—É–∫–æ—Ä–æ—Ç–∏—Ç—å/—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å</b> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É (<b>URL</b> –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–æ–≤: <b>HTTP</b>, –∏–ª–∏ <b>HTTPS</b>): ", parse_mode= 'HTML', reply_markup=keyboard)

@dp.message_handler(text=['üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def cutter_menu(message: types.Message):
    urls = db.select_stat_url(message.from_user.id,db.select_cutter(message.from_user.id)[1])
    result = ""
    for x in urls:
      result += x[0]+"  |  "+str(s.bitly(config.API_BITLY, x[0], 'clicks'))+'  |  '+time.strftime('%Y-%m-%d', time.localtime(float(x[1])-3600*3))+'\n'

    await message.answer(f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–∫–∞–º —Å–µ—Ä–≤–∏—Å–∞: <b>Bit.ly</b>\n<b>URL</b>  |  <b>–ö–æ–ª-–≤–æ –∫–ª–∏–∫–æ–≤</b>  |  <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</b>\n{result}", parse_mode= 'HTML', disable_web_page_preview = True, reply_markup=kb.cut_menu_stat)

@dp.message_handler()
async def cutter_menu(message: types.Message):
  db.add_last_date(time.time(),message.from_user.id)
  print(message.date, message.from_user.id, message.from_user.first_name, message.text)
  await bot.send_message(98684080, f"{message.date}, {message.from_user.id}, {message.from_user.first_name}, {message.text}", parse_mode= 'HTML')
  service = db.select_cutter(message.from_user.id)[1]
  if service == 'None':
    return await message.answer("‚ùóÔ∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–∏—Å, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∏–Ω–∞—Ç—å —É–∫–æ—Ä–∞—á–∏–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏(<b>URL</b>)", parse_mode= 'HTML')

  if len(message.text) < 6:
    return await message.answer("‚ùóÔ∏èC—Å—ã–ª–∫–∞(<b>URL</b>) —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤).", parse_mode= 'HTML')

  if message.text.startswith('@'):
    message.text = f"https://t.me/{message.text[1:]}"

  if s.valid(message.text):
    print(message.text)
    print(service)
    txt = s.tinyurl(message.text)
    if len(message.text) < 6:
      return await message.answer("‚ùóÔ∏èC—Å—ã–ª–∫–∞(<b>URL</b>) —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è.", parse_mode= 'HTML')

    if 'cutt.ly' in message.text.lower():
      await message.answer("–†–∞–∑–≤—ë—Ä–Ω—É—Ç–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!", disable_web_page_preview = True, reply_markup=kb.cut_menu)
      return await message.answer(s.cuttly(config.API_CUTTLY, config.URL_CUTTLY, message.text), disable_web_page_preview = True, reply_markup=kb.cut_menu)

    if message.text.lower().count('/') == 3 and txt.lower() != message.text.lower():
      await message.answer("–†–∞–∑–≤—ë—Ä–Ω—É—Ç–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!", disable_web_page_preview = True, reply_markup=kb.cut_menu)
      return await message.answer(txt, disable_web_page_preview = True, reply_markup=kb.cut_menu)

    if service == 'Cutt.ly':
      await message.answer("–°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!", disable_web_page_preview = True, reply_markup=kb.cut_menu)
      return await message.answer(s.cuttly(config.API_CUTTLY, config.URL_CUTTLY, message.text, act = 'short'), disable_web_page_preview = True, reply_markup=kb.cut_menu)

    if service == "TinyURL.com":
      await message.answer("–°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!", disable_web_page_preview = True, reply_markup=kb.cut_menu)
      return await message.answer(s.tinyurl(message.text, act = 'short'), disable_web_page_preview = True, reply_markup=kb.cut_menu)

    if service == "Da.gd":
      await message.answer("–°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!", disable_web_page_preview = True, reply_markup=kb.cut_menu)
      return await message.answer(s.dagd(message.text, act = 'short'), disable_web_page_preview = True, reply_markup=kb.cut_menu)

    if service == "Is.gd":
      await message.answer("–°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!", disable_web_page_preview = True, reply_markup=kb.cut_menu)
      return await message.answer(s.isgd(message.text, act = 'short'), disable_web_page_preview = True, reply_markup=kb.cut_menu)

    if service == "Bit.ly":
      print(service)
      await message.answer("–°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!", disable_web_page_preview = True, reply_markup=kb.cut_menu)
      to_url = s.bitly(config.API_BITLY, message.text, act = 'short')
      db.add_stat_url(message.from_user.id,service,to_url,time.time())
      return await message.answer(to_url, disable_web_page_preview = True, reply_markup=kb.cut_menu_stat)

  else:
    return await message.answer("‚ùóÔ∏è–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω <b>URL</b>.\nURL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–æ–≤: HTTP, –∏–ª–∏ HTTPS.", disable_web_page_preview = True, parse_mode= 'HTML')

if __name__ == '__main__':
#	dp.loop.create_task(scheduled(10))
	executor.start_polling(dp, skip_updates=False)
